create table "public"."chat_message" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "message" text not null,
    "user_id" uuid not null,
    "room_id" uuid not null
);


alter table "public"."chat_message" enable row level security;

create table "public"."chat_room" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "owner_id" uuid
);


alter table "public"."chat_room" enable row level security;

create table "public"."chat_room_member" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "room_id" uuid not null
);


alter table "public"."chat_room_member" enable row level security;

CREATE UNIQUE INDEX "chat-message_pkey" ON public.chat_message USING btree (id);

CREATE UNIQUE INDEX "chat-room-member_pkey" ON public.chat_room_member USING btree (id);

CREATE UNIQUE INDEX "chat-room_pkey" ON public.chat_room USING btree (id);

alter table "public"."chat_message" add constraint "chat-message_pkey" PRIMARY KEY using index "chat-message_pkey";

alter table "public"."chat_room" add constraint "chat-room_pkey" PRIMARY KEY using index "chat-room_pkey";

alter table "public"."chat_room_member" add constraint "chat-room-member_pkey" PRIMARY KEY using index "chat-room-member_pkey";

alter table "public"."chat_message" add constraint "chat_message_room_id_fkey" FOREIGN KEY (room_id) REFERENCES chat_room(id) ON DELETE CASCADE not valid;

alter table "public"."chat_message" validate constraint "chat_message_room_id_fkey";

alter table "public"."chat_message" add constraint "chat_message_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."chat_message" validate constraint "chat_message_user_id_fkey";

alter table "public"."chat_room" add constraint "chat_room_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES users(id) not valid;

alter table "public"."chat_room" validate constraint "chat_room_owner_id_fkey";

alter table "public"."chat_room_member" add constraint "chat_room_member_room_id_fkey" FOREIGN KEY (room_id) REFERENCES chat_room(id) ON DELETE CASCADE not valid;

alter table "public"."chat_room_member" validate constraint "chat_room_member_room_id_fkey";

alter table "public"."chat_room_member" add constraint "chat_room_member_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."chat_room_member" validate constraint "chat_room_member_user_id_fkey";

create policy "Allow insert where im a member"
on "public"."chat_message"
as permissive
for insert
to authenticated
with check ((room_id IN ( SELECT chat_room_member.room_id
   FROM chat_room_member
  WHERE (chat_room_member.user_id = auth.uid()))));


create policy "Allow to read messages where I am a room member"
on "public"."chat_message"
as permissive
for select
to authenticated
using ((room_id IN ( SELECT chat_room_member.room_id
   FROM chat_room_member
  WHERE (chat_room_member.user_id = auth.uid()))));


create policy "Allow auth users to create"
on "public"."chat_room"
as permissive
for insert
to authenticated
with check ((auth.uid() IS NOT NULL));



